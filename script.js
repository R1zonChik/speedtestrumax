class SpeedTestRumax {
    constructor() {
        this.isRunning = false;
        this.userIP = null;
        this.selectedRating = null;
        this.init();
    }

    async init() {
        this.bindEvents();
        await this.displayUserInfo();
        this.generateResultId();
        this.initRatingSystem();
        this.initShareButtons();
    }

    bindEvents() {
        document.getElementById('startTest').addEventListener('click', () => {
            if (!this.isRunning) {
                this.startSpeedTest();
            }
        });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
    async displayUserInfo() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π IP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        const russianIPRanges = [
            '193.233.', '95.165.', '178.176.', '46.39.', '85.143.',
            '188.162.', '109.195.', '37.110.', '5.101.', '217.118.'
        ];
        
        const randomRange = russianIPRanges[Math.floor(Math.random() * russianIPRanges.length)];
        const ip = randomRange + Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255);
        
        document.getElementById('ipDisplay').textContent = ip;
        this.userIP = ip;

        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        const providers = [
            'FATTAKHOV RINAT RASHITOVICH',
            'Rostelecom',
            'MTS PJSC',
            'VimpelCom',
            'T2 Mobile LLC',
            'ER-Telecom Holding',
            'TTK',
            'Megafon',
            'Beeline',
            'Tele2'
        ];

        const locations = [
            'Syzran, Samara Oblast, RU',
            'Moscow, Moscow, RU', 
            'Saint Petersburg, Saint Petersburg, RU',
            'Novosibirsk, Novosibirsk Oblast, RU',
            'Yekaterinburg, Sverdlovsk Oblast, RU',
            'Kazan, Republic of Tatarstan, RU',
            'Nizhny Novgorod, Nizhny Novgorod Oblast, RU',
            'Chelyabinsk, Chelyabinsk Oblast, RU'
        ];

        const randomProvider = providers[Math.floor(Math.random() * providers.length)];
        const randomLocation = locations[Math.floor(Math.random() * locations.length)];

        document.getElementById('providerDisplay').textContent = randomProvider;
        document.getElementById('locationDisplay').textContent = randomLocation;
    }

    generateResultId() {
        const resultId = 'RUMAX-' + Math.random().toString(36).substr(2, 9).toUpperCase();
        document.getElementById('resultId').textContent = resultId;
    }

    initRatingSystem() {
        const ratingButtons = document.querySelectorAll('.rating-btn');
        ratingButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const score = parseInt(e.target.dataset.score);
                this.selectRating(score);
            });
        });
    }

    selectRating(score) {
        this.selectedRating = score;
        const ratingButtons = document.querySelectorAll('.rating-btn');
        const ratingResult = document.getElementById('ratingResult');

        ratingButtons.forEach(btn => {
            btn.classList.remove('selected', 'detractor', 'passive', 'promoter');
        });

        const selectedBtn = document.querySelector(`[data-score="${score}"]`);
        selectedBtn.classList.add('selected');

        let category, message, categoryClass;
        if (score <= 6) {
            category = '–ö—Ä–∏—Ç–∏–∫';
            message = `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É ${score}/10! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.`;
            categoryClass = 'detractor';
            selectedBtn.classList.add('detractor');
        } else if (score <= 8) {
            category = '–ù–µ–π—Ç—Ä–∞–ª';
            message = `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É ${score}/10! –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ –¥–ª—è –≤–∞—Å.`;
            categoryClass = 'passive';
            selectedBtn.classList.add('passive');
        } else {
            category = '–ü—Ä–æ–º–æ—É—Ç–µ—Ä';
            message = `–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É ${score}/10! üéâ`;
            categoryClass = 'promoter';
            selectedBtn.classList.add('promoter');
        }

        ratingResult.innerHTML = `<strong>${category}:</strong> ${message}`;
        ratingResult.className = `rating-result show ${categoryClass}`;
        
        console.log(`NPS Score: ${score}, Category: ${category}`);
    }

    initShareButtons() {
        const shareButtons = document.querySelectorAll('.share-btn');
        shareButtons.forEach((btn, index) => {
            btn.addEventListener('click', () => {
                const url = window.location.href;
                const text = `–ü—Ä–æ–≤–µ—Ä–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ SpeedTestRumax! ${url}`;
                
                switch (index) {
                    case 0:
                        this.copyToClipboard(url);
                        this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                        break;
                    case 1:
                        window.open(`mailto:?subject=–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞&body=${encodeURIComponent(text)}`);
                        break;
                    case 2:
                        if (navigator.share) {
                            navigator.share({
                                title: 'SpeedTestRumax',
                                text: '–ü—Ä–æ–≤–µ—Ä–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!',
                                url: url
                            });
                        } else {
                            window.open(`https://vk.com/share.php?url=${encodeURIComponent(url)}&title=${encodeURIComponent('SpeedTestRumax - –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏')}`);
                        }
                        break;
                }
            });
        });
    }

    copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text);
        } else {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
        }
    }

    showNotification(message) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #00d4ff, #667eea);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            z-index: 10000;
            font-weight: 600;
            animation: slideIn 0.3s ease;
        `;
        notification.textContent = message;

        if (!document.querySelector('#notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    async startSpeedTest() {
        if (this.isRunning) return;
        
        this.isRunning = true;
        const startButton = document.getElementById('startTest');
        const buttonText = startButton.querySelector('.test-button-text');
        const progress = document.getElementById('testProgress');
        
        startButton.classList.add('testing');
        buttonText.textContent = '–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï...';
        
        try {
            this.resetValues();
            
            // 1. –¢–µ—Å—Ç –ø–∏–Ω–≥–∞
            buttonText.textContent = '–ò–ó–ú–ï–†–ï–ù–ò–ï –ü–ò–ù–ì–ê...';
            progress.style.width = '20%';
            await this.testRealisticPing();
            
            // 2. –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            buttonText.textContent = '–¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò...';
            progress.style.width = '60%';
            await this.testRealisticDownload();
            
            // 3. –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–¥–∞—á–∏
            buttonText.textContent = '–¢–ï–°–¢ –û–¢–î–ê–ß–ò...';
            progress.style.width = '90%';
            await this.testRealisticUpload();
            
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            progress.style.width = '100%';
            buttonText.textContent = '–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù';
            this.showNotification('–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
            
            setTimeout(() => {
                buttonText.textContent = '–ù–ê–ß–ê–¢–¨ –¢–ï–°–¢';
                progress.style.width = '0%';
                startButton.classList.remove('testing');
                this.isRunning = false;
            }, 2000);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
            buttonText.textContent = '–û–®–ò–ë–ö–ê –¢–ï–°–¢–ê';
            this.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
            
            setTimeout(() => {
                buttonText.textContent = '–ù–ê–ß–ê–¢–¨ –¢–ï–°–¢';
                progress.style.width = '0%';
                startButton.classList.remove('testing');
                this.isRunning = false;
            }, 2000);
        }
    }

    resetValues() {
        document.getElementById('downloadSpeed').textContent = '0.00';
        document.getElementById('uploadSpeed').textContent = '0.00';
        document.getElementById('pingValue').textContent = '0';
        document.getElementById('jitterValue').textContent = '0';
    }

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞
    async testRealisticPing() {
        const pingElement = document.getElementById('pingValue');
        const jitterElement = document.getElementById('jitterValue');
        
        const pingTimes = [];
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞
        for (let i = 0; i < 8; i++) {
            // –ë–∞–∑–æ–≤—ã–π –ø–∏–Ω–≥ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: 15-80ms
            const basePing = 20 + Math.random() * 60;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∂–∏—Ç—Ç–µ—Ä
            const jitter = (Math.random() - 0.5) * 20;
            const pingTime = Math.max(5, Math.round(basePing + jitter));
            
            pingTimes.push(pingTime);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            const avgPing = Math.round(pingTimes.reduce((a, b) => a + b, 0) / pingTimes.length);
            pingElement.textContent = avgPing;
            
            await this.sleep(200);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const avgPing = pingTimes.reduce((a, b) => a + b, 0) / pingTimes.length;
        const variance = pingTimes.reduce((sum, ping) => sum + Math.pow(ping - avgPing, 2), 0) / pingTimes.length;
        const jitter = Math.round(Math.sqrt(variance));
        
        pingElement.textContent = Math.round(avgPing);
        jitterElement.textContent = Math.max(1, jitter);
    }

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    async testRealisticDownload() {
        const downloadElement = document.getElementById('downloadSpeed');
        
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        const connectionTypes = [
            { name: 'ADSL', min: 5, max: 25 },      // 5-25 –ú–±–∏—Ç/—Å
            { name: 'Cable', min: 30, max: 100 },   // 30-100 –ú–±–∏—Ç/—Å  
            { name: 'Fiber', min: 50, max: 200 },   // 50-200 –ú–±–∏—Ç/—Å
            { name: 'Mobile', min: 10, max: 80 }    // 10-80 –ú–±–∏—Ç/—Å
        ];
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connectionType = connectionTypes[Math.floor(Math.random() * connectionTypes.length)];
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è
        let currentSpeed = 0;
        const targetSpeed = connectionType.min + Math.random() * (connectionType.max - connectionType.min);
        
        for (let i = 0; i < 10; i++) {
            // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            const progress = (i + 1) / 10;
            currentSpeed = targetSpeed * progress + (Math.random() - 0.5) * 5;
            currentSpeed = Math.max(1, currentSpeed);
            
            downloadElement.textContent = currentSpeed.toFixed(2);
            await this.sleep(300);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        downloadElement.textContent = targetSpeed.toFixed(2);
    }

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–¥–∞—á–∏
    async testRealisticUpload() {
        const uploadElement = document.getElementById('uploadSpeed');
        
        // –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏ –æ–±—ã—á–Ω–æ –≤ 3-10 —Ä–∞–∑ –º–µ–Ω—å—à–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const downloadSpeed = parseFloat(document.getElementById('downloadSpeed').textContent);
        const uploadRatio = 0.1 + Math.random() * 0.4; // 10-50% –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        
        let currentSpeed = 0;
        const targetSpeed = downloadSpeed * uploadRatio;
        
        for (let i = 0; i < 8; i++) {
            // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            const progress = (i + 1) / 8;
            currentSpeed = targetSpeed * progress + (Math.random() - 0.5) * 2;
            currentSpeed = Math.max(0.5, currentSpeed);
            
            uploadElement.textContent = currentSpeed.toFixed(2);
            await this.sleep(250);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        uploadElement.textContent = targetSpeed.toFixed(2);
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new SpeedTestRumax();
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    // –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const animateNumbers = () => {
        const numbers = document.querySelectorAll('.speed-value, .ping-value');
        numbers.forEach(num => {
            num.style.opacity = '0';
            setTimeout(() => {
                num.style.opacity = '1';
                num.style.transition = 'opacity 0.5s ease';
            }, Math.random() * 1000);
        });
    };

    animateNumbers();

    // –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –≤ —Ñ–æ–Ω–µ
    const createParticles = () => {
        const particlesContainer = document.createElement('div');
        particlesContainer.className = 'particles';
        particlesContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        `;

        for (let i = 0; i < 50; i++) {
            const particle = document.createElement('div');
            particle.style.cssText = `
                position: absolute;
                width: 2px;
                height: 2px;
                background: rgba(0, 212, 255, 0.3);
                border-radius: 50%;
                animation: float ${5 + Math.random() * 10}s infinite linear;
                left: ${Math.random() * 100}%;
                top: ${Math.random() * 100}%;
            `;
            particlesContainer.appendChild(particle);
        }

        document.body.appendChild(particlesContainer);
    };

    createParticles();
});
